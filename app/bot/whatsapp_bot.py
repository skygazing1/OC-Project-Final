from fastapi import FastAPI, Request, Response
from twilio.twiml.messaging_response import MessagingResponse
from app.core.config import settings
from app.core.database import get_db, init_db
from app.services.registration import RegistrationService
from app.services.notification import NotificationService
from app.utils.constants import Platform, RegistrationState, FAQ, SUPPORT_KEYWORDS
import logging

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize database
init_db()

app = FastAPI()

# Store user states in memory (in production, use Redis or similar)
user_states = {}

def get_user_state(phone: str) -> str:
    """Get user's current state."""
    return user_states.get(phone, RegistrationState.INITIAL)

def set_user_state(phone: str, state: str) -> None:
    """Set user's current state."""
    user_states[phone] = state

@app.post("/webhook")
async def webhook(request: Request) -> Response:
    """Handle incoming WhatsApp messages."""
    # Parse incoming message
    form_data = await request.form()
    incoming_msg = form_data.get('Body', '').strip()
    sender = form_data.get('From', '').replace('whatsapp:', '')
    
    # Create response
    resp = MessagingResponse()
    msg = resp.message()
    
    # Get user state
    current_state = get_user_state(sender)
    
    # Initialize services
    db = next(get_db())
    registration_service = RegistrationService(db)
    notification_service = NotificationService(db)
    
    # Get or create user
    user = registration_service.get_user(Platform.WHATSAPP, sender)
    if not user:
        user = registration_service.create_user(Platform.WHATSAPP, sender)
    
    # Handle message based on state
    if current_state == RegistrationState.INITIAL:
        # Send welcome message
        msg.body(settings.Messages.WELCOME.format(
            date=settings.EVENT_DATE,
            location=settings.EVENT_LOCATION
        ) + "\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ñ–æ—Ä—É–º. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: info@esgtech.pro")
        set_user_state(sender, RegistrationState.ASKING_NAME)
    
    elif current_state == RegistrationState.ASKING_NAME:
        is_valid, error = registration_service.update_user_name(user, incoming_msg)
        if not is_valid:
            msg.body(error)
        else:
            msg.body("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
            set_user_state(sender, RegistrationState.ASKING_EMAIL)
    
    elif current_state == RegistrationState.ASKING_EMAIL:
        is_valid, error = registration_service.update_user_email(user, incoming_msg)
        if not is_valid:
            msg.body(error)
        else:
            msg.body("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            set_user_state(sender, RegistrationState.ASKING_PHONE)
    
    elif current_state == RegistrationState.ASKING_PHONE:
        is_valid, error = registration_service.update_user_phone(user, incoming_msg)
        if not is_valid:
            msg.body(error)
        else:
            # Show confirmation
            msg.body(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
                f"üë§ –§–ò–û: {user.full_name}\n"
                f"üìß Email: {user.email}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n\n"
                f"–í—Å—ë –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            set_user_state(sender, RegistrationState.CONFIRMATION)
    
    elif current_state == RegistrationState.CONFIRMATION:
        if incoming_msg.lower() in ['–¥–∞', 'yes', 'y']:
            registration_service.complete_registration(user)
            await notification_service.send_registration_confirmation(user)
            msg.body(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤–∞—à email: {user.email}\n\n"
                "–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Ñ–æ—Ä—É–º–µ!"
            )
            set_user_state(sender, RegistrationState.COMPLETED)
        elif incoming_msg.lower() in ['–Ω–µ—Ç', 'no', 'n']:
            msg.body("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            set_user_state(sender, RegistrationState.INITIAL)
        else:
            msg.body("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
    
    elif incoming_msg.lower().startswith('–æ—Ç–∑—ã–≤') or incoming_msg.lower().startswith('feedback'):
        if not user.is_registered:
            msg.body("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        else:
            feedback_text = incoming_msg.partition(' ')[2]
            registration_service.save_feedback(user, feedback_text)
            msg.body("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
        return Response(content=str(resp), media_type="application/xml")
    elif incoming_msg.lower() in ['—É–¥–∞–ª–∏—Ç—å –º–µ–Ω—è', 'delete me']:
        registration_service.delete_user(user)
        msg.body("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –°–ø–∞—Å–∏–±–æ!")
        return Response(content=str(resp), media_type="application/xml")
    
    else:
        # Handle FAQ and general messages
        text = incoming_msg.lower()
        
        # Check if it's a support request
        if any(keyword in text for keyword in SUPPORT_KEYWORDS):
            msg.body(settings.Messages.SUPPORT_MESSAGE.format(
                telegram=settings.ADMIN_TELEGRAM,
                email=settings.ADMIN_EMAIL,
                phone=settings.ADMIN_PHONE
            ))
            return Response(content=str(resp), media_type="application/xml")
        
        # Check FAQ
        for question, answer in FAQ.items():
            if question.lower() in text:
                msg.body(answer)
                return Response(content=str(resp), media_type="application/xml")
        
        # If no FAQ match, show all available questions
        faq_text = "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–º–∞–º:\n\n"
        for question in FAQ.keys():
            faq_text += f"‚Ä¢ {question}\n"
        
        msg.body(faq_text)
    
    return Response(content=str(resp), media_type="application/xml")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 